package fr.xmalware.badblocktab;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scoreboard.Team;

import com.earth2me.essentials.Essentials;

import fr.xmalware.badblocktab.commands.BaillonCommand;
import fr.xmalware.badblocktab.commands.SetAFKCommand;
import fr.xmalware.badblocktab.commands.SlowmodeCommand;
import fr.xmalware.badblocktab.commands.TabBlockCommand;
import fr.xmalware.badblocktab.listeners.AsyncChatListener;
import fr.xmalware.badblocktab.listeners.PermissionEntityListener;
import fr.xmalware.badblocktab.listeners.PlayerDisconnectionListener;
import fr.xmalware.badblocktab.listeners.PlayerJoinListener;
import fr.xmalware.badblocktab.objects.TabPlayer;
import fr.xmalware.badblocktab.permissions.PermissionsExManager;
import ru.tehkode.permissions.PermissionUser;
import us.talabrek.ultimateskyblock.uSkyBlock;
import us.talabrek.ultimateskyblock.api.uSkyBlockAPI;
import us.talabrek.ultimateskyblock.challenge.Challenge;
import us.talabrek.ultimateskyblock.challenge.ChallengeCompletion;
import us.talabrek.ultimateskyblock.player.PlayerInfo;

public class BadBlockTab extends JavaPlugin {

	private static BadBlockTab		 instance;

	public boolean				 baillon		= false;
	public long					 slowmodeTime   = 0L;
	public long					 slowmodeMax    = 0L;
	public String				 slowmodePlayer;
	
	public Map<String,  String>  teamsPrefix    = new HashMap<>();
	public Map<String,  String>  teamsGroup     = new HashMap<>();
	public PermissionsExManager  permissionsExManager;
	public uSkyBlockAPI			 api;
	public uSkyBlock			 uSkyBlock;
	
	public boolean				 chat;
	public List<String>			 afk 			= new ArrayList<>();
	
	@Override
	public void onEnable() {
		instance = this;
		permissionsExManager = new PermissionsExManager();
		this.saveDefaultConfig();
		this.reloadConfig();
		PluginManager pluginManager = this.getServer().getPluginManager();
		pluginManager.registerEvents(new PlayerDisconnectionListener(), this);
		pluginManager.registerEvents(new PermissionEntityListener(), this);
		pluginManager.registerEvents(new PlayerJoinListener(), this);
		pluginManager.registerEvents(new AsyncChatListener(), this);
		getCommand("tabblock").setExecutor(new TabBlockCommand());
		getCommand("baillon").setExecutor(new BaillonCommand());
		getCommand("slowmode").setExecutor(new SlowmodeCommand());
		getCommand("setafk").setExecutor(new SetAFKCommand());
		Plugin plugin = Bukkit.getPluginManager().getPlugin("uSkyBlock");
		if (plugin instanceof uSkyBlockAPI && plugin.isEnabled()) {
			api = (uSkyBlockAPI) plugin;
			uSkyBlock = (uSkyBlock) api;
			Bukkit.getScheduler().runTaskTimerAsynchronously(this, new Runnable() {
				@Override
				public void run() {
					for (Player player : Bukkit.getOnlinePlayers()) {
						PlayerInfo playerInfo = uSkyBlock.getPlayerInfo(player);
						boolean completed = true;
						List<Challenge> skylordChallenges = uSkyBlock.getChallengeLogic().getChallengesForRank("Skylord");
						List<String> skylordStringChallenges = new ArrayList<>();
						skylordChallenges.forEach(challenge -> skylordStringChallenges.add(challenge.getName()));
						for (ChallengeCompletion challengeCompletion : playerInfo.getChallenges()) {
							if (!skylordStringChallenges.contains(challengeCompletion.getName())) continue;
							if (challengeCompletion.getTimesCompleted() <= 0) {
								completed = false;
								break;
							}
						}
						boolean okay = playerInfo.getHasIsland() && playerInfo.getIslandInfo().getLevel() >= 5000 && completed;
						PermissionUser permissionUser = permissionsExManager.manager.getUser(player);
						if (!okay) {
							if (permissionUser.inGroup("Skylord")) {
								permissionUser.removeGroup("Skylord");
								Essentials ess = (Essentials) Bukkit.getPluginManager().getPlugin("Essentials");
								ess.getUser(player).setNickname(player.getName());
							}
						}else{
							if (!permissionUser.inGroup("Skylord")) permissionUser.addGroup("Skylord");
						}
					}
				}
			}, 0, 20 * 60);
		}
	}
	
	@Override
	public void reloadConfig() {
		super.reloadConfig();
		FileConfiguration config = this.getConfig();
		for (String string : config.getStringList("groupsOrder")) {
			String[] splitter = string.split(":");
			teamsGroup.put(splitter[0], splitter[1]);
			teamsPrefix.put(splitter[0], splitter[2]);
		}
		if (!config.contains("chat")) {
			config.set("chat", true);
			this.saveConfig();
			chat = true;
		}else chat = config.getBoolean("chat");
		TabPlayer.players.clear();
		for (Player player : this.getServer().getOnlinePlayers())
			TabPlayer.getPlayer(player);
	}
	
	public static BadBlockTab getInstance() {
		return instance;
	}
	
}
